(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/scripts/app.js":[function(require,module,exports){
// var angular = require('angular');
// var $ = require('jquery-browserify');
// var bootstrap = require('bootstrap');
// require('jquery-mousewheel')($);
// var jQuery = $;
// require('../../libs/scrollbar/jquery.mCustomScrollbar');
// require('../../libs/slick/slick.min');
require('./infscr');
require('./ads');
require('./scores');


(function($){


/// Sub Nav Area Functionality
var closer;


function SubNav(event){
	window.clearTimeout(closer);
	
	var target = $(event.target).attr('targ')

	// remove red from item and link
	$('#MainNav ul li').removeClass('selected');
	$('#MainNav ul li a').removeClass('selected');
	
	// add red background to hovered item
	$(event.target).addClass('selected');
	// hide all of the sub nav
	$('#SideSubNav ul').hide();
	// show the subnav for the hovered item
	$('#' + target + '-nav').css('display', 'block');

	// slide the main content over to the right
	$('#MainContent').css('left', '320px');
	BackgroundPosition(320);
}

// activate SubNav on mouseover or click of main nav
$("#MainNav").on("click mouseover", "ul li", SubNav);


function CloseSubNav (event) {
	var mainWidth = $('#MainContent').css('left');
	mainWidth = mainWidth.replace('px', '');
	mainWidth = parseInt(mainWidth);
	// if the nav bar is open close the sub nav
	if (mainWidth >= 175) {
		closer = window.setTimeout(function () {
			$('#MainContent').css('left', '175px');
			BackgroundPosition(175);
		}, 500);
	}
}


// if the mouse enters the main content close the subnav
$('main').on('mouseenter', CloseSubNav);


function ClickMenu(event) {
	if ($('#MainContent').css('left') == '30px') {
		$('#MainContent').css('left','175px');
		BackgroundPosition(175);
	} else {
		$('#MainContent').css('left','30px');
		BackgroundPosition(30);
	}
}

$('.shownav').on('click', ClickMenu);

function SideBar(){
	if($("#sidebar-ad-placeholder").height() < 250){
		ad_offset = 250
	} else {
		ad_offset = $("#sidebar-ad-placeholder").height();
	}
	var offset =  $(window).height() - ($('#HeaderContent').height() + ad_offset + 70);
	$("#SideBar").css({'margin-top': ($(window).scrollTop()), 'height': offset});
	$("#sidebar-ad-placeholder").css({'position': 'fixed', 'bottom': 10});
}

function HeaderHeight() {
	$('.header-push').css('padding-top', $('#HeaderContent').height() + 10);
}

function BackgroundPosition(mainmargin) {
	var mainwidth = $('#MainContent').width();
	var headercontent = $('#HeaderContent').height();
	var combinedwidth = mainmargin + parseInt(mainwidth);
	var combinedpos = combinedwidth + 'px ' + (headercontent + 10) + 'px'
	//console.log(combinedpos);
	$('body, html').css('background-position', combinedpos);
}

HeaderHeight();
SideBar();
BackgroundPosition($('#MainContent').position().left);

$(window).resize(function(event) {
	SideBar();
	HeaderHeight();
	BackgroundPosition($('#MainContent').position().left);
})

/**  Keep the sidebar up top **/
$(window).scroll(function(event){
$("#SideBar")
	.stop()
	SideBar();
});



/*******************************************************/


// ********* Init custom scrollbars here  ********* //
$("#MainNav").mCustomScrollbar({
    axis:"y", // vertical scrollbar
    theme:"minimal"
});

$("#SideSubNav").mCustomScrollbar({
    axis:"y", // vertical scrollbar
    theme:"minimal"
});

$(".TabPanel").mCustomScrollbar({
    axis:"y", // vertical scrollbar
    theme:"minimal-dark"
});

// *********** Tabs Functionality Init.  ************ //
$('#tabs a').click(function (e) {
  e.preventDefault()
  $(this).tab('show')
})

})(jQuery);

},{"./ads":"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/ads.js","./infscr":"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/infscr.js","./scores":"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/scores.js"}],"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/ads.js":[function(require,module,exports){
(function (googletag) {
// GPT slots
var gptAdSlots = [];
googletag.cmd.push(function() {

// Define a size mapping object. The first parameter to addSize is
// a viewport size, while the second is a list of allowed ad sizes.
var mapping728x90 = googletag.sizeMapping().

// Accepts both common mobile banner formats
addSize([0, 0], [[320, 50], [300, 50]]). 
// Small Devices and larger
addSize([768, 0], [728, 90]).
// Small Devices and larger
addSize([1020, 0], [[980, 50], [728, 90]]).build();

// Define the GPT slot
gptAdSlots[0] = googletag.defineSlot('/310322/a.site152.tmus', [980, 50], 'header-ad-placeholder').
defineSizeMapping(mapping728x90).
addService(googletag.pubads());


var mapping300x250 = googletag.sizeMapping().
// Accepts both common mobile banner formats
addSize([0, 0], [300, 250]). 
// Small Devices and larger
addSize([768, 850], [300, 250],[300, 600]).build();		

gptAdSlots[1] = googletag.defineSlot('/310322/a.site152.tmus', [300, 250], 'sidebar-ad-placeholder').
defineSizeMapping(mapping300x250).
addService(googletag.pubads());

// Start ad fetching
googletag.enableServices();
googletag.cmd.push(function() {
	googletag.display('header-ad-placeholder');
	googletag.display('sidebar-ad-placeholder');
});
});

// setInterval(function(){
// 	googletag.pubads().refresh();
// 	console.log("Refresh Ads");
// }, 15000);
})(googletag)
},{}],"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/infscr.js":[function(require,module,exports){
(function (angular) {
var infscr = angular.module('infscr', []);

infscr.config(function ($httpProvider) {
	delete $httpProvider.defaults.headers.common['X-Requested-With'];
});


// scrollDiv defines the object to be used as a directive
function scrollDiv ($window) {
  'use strict';

  // this function loads on the defined element
  return function (scope, element, attrs) {
      // position starts at 0
      scope.position = 0;

      // wait for the LOADDONE event
      scope.$on('LOADDONE', function (event) {
        scope.position = Math.floor(((window.pageYOffset + $(window).height()) / $(document).height()) * 100);
        
        angular.element(window).bind('scroll', function () {          
          scope.position = Math.floor(((this.pageYOffset + $(window).height()) / $(document).height()) * 100);
          if (scope.position > 85) {
            scope.getMore();
          }
          scope.$apply();
        });

        if (scope.count >= 60) {
          angular.element(window).unbind('scroll');
        }
      });

    }
}

// assign scrollDiv to a directive
// in a minification safe manner
infscr.directive('scrollDiv', ['$window', scrollDiv]);






// The getStoryList function uses angularjs' $http
// object to make xhr's to get stories
function getStoryList ($http) {

  // the url to request stories from
  var url = 'http://golfweek.com/json/';

  return {
    // the get function should suffice for most normal uses
    // it accepts a context object to get info about the sections
    // ctx also needs a success function to return the data
    get: function (ctx) {
      // the category function is here for future use with sections and sub sections
      // currently it is not used
      var category = (ctx.section === undefined) ? '' : ctx.section;
      category += (ctx.sub === undefined || ctx.sub === 'all') ? '' : '/' + ctx.sub;
      category += (ctx.subsub === undefined) ? '' : '/' + ctx.subsub;
      category += (ctx.subsubsub === undefined) ? '' : '/' + ctx.subsubsub;
      
      // the count is at minimum 15 but must be in increments of 15 currently
      var count = (ctx.count === undefined) ? 15 : ctx.count;
      
      // make the request to golfweek 
      // ***MUST BE A POST OR ELLINGTON BLOCKS IT***
      $http.post(url + 'section/?Section=' + category + '&Num=' + count)
        .success(function (data) {  
          ctx.success(data);
        })
        .error(function (data, status) {
          console.log(data, status);
        });
    }
  }
}


// Assign getStoryList as an angular factory 
// in a manner safe for minification
infscr.factory('getStoryList', ['$http', getStoryList]);



// the getStoryContent function is intended to load the clicked
// story into the selected div
function getStoryContent ($http) {
  
  // the base url to request the storydata from
  var url = 'http://golfweek.com/';

  return {
    get: function (ctx) {      
      $http.post(url + ctx.slug + '?json')
        .success(function (data) {
          ctx.storySuccess(data);
        })
        .error(function (data, status) {
          console.log(data, status);
        });
    }
  }
}


// Assign getStoryList as an angular factory 
// in a manner safe for minification
infscr.factory('getStoryContent', ['$http', getStoryContent]);



// the infScrollController function is intended to be used 
// in the div where the stories should be added for infinite 
// scrolling
function infScrollController ($scope, $window, storyList, story) {
	$scope.count = 15;  // number of stories to get
	$scope.fetching = false; // are we fetching right now?
  $scope.stories = []; // starts out as an empty array

  $scope.$on('LOAD', function (e) { $scope.fetching = true; });
  $scope.$on('LOADDONE', function (e) { $scope.fetching = false; });

  // this is the success handler when data is received
  $scope.success = function (data) {
    angular.forEach(data.stories, function (val, key) {
      this[key] = val;
    }, $scope.stories);
    // console.log('%O', $scope.stories[0]);
    // let everything know we are done loading
    $scope.$emit('LOADDONE');
  }

  // get the stories the first time
  storyList.get($scope);

  // getMore should be used when the div is scrolled
	$scope.getMore = function () {
		// if page position is bigger than 88 
		// fetch more stories
		if (!$scope.fetching) {
      $scope.$emit('LOAD');
      $scope.count = ($scope.count === 60) ? 60 : $scope.count + 15;
			// let everything know we are loading
      storyList.get($scope);

		}
	}

  $scope.storySuccess = function (data) {
    // set the data here to the expanding div for the story
    // console.log('%o', $scope.stories);
    $scope.stories[$scope.storyId]['storyContent'] = data.story[0];
    console.log(data);
  }


  $scope.storyClick = function () {
    // console.log('%o',this.$index)
    $scope.slug = this.story.id;
    $scope.storyId = this.$index;
    story.get($scope);
  }


}


// Assign infScrollController as an angular controller 
// in a manner safe for minification
infscr.controller('infScrollCtrl', ['$scope', '$window', 'getStoryList', 'getStoryContent', infScrollController]);






(function () {

  var THECODE = [38,38,40,40,37,39,37,39,66,65];

  var testcode = [];
  var time;

  // k code stuff
  function checkKeys (e) {
    var button = (e.keyCode);

    if (THECODE.indexOf(button) > -1) {
      testcode[testcode.length] = e.keyCode;

      if (testcode.length === THECODE.length) {
        checkCode();
      } else {
        clearCode();
      }
    }
  }

  function checkCode () {
    for (var i = 0; i < THECODE.length; i++) {
      if (THECODE[i] !== testcode[i]) {
        testcode = [];
        break;
      }
    }
    if (testcode.length > 0) {
      console.log('duf time!');
    }
  }

  function clearCode () {
    if (time === undefined) {
      time = window.setTimeout(function() {
        testcode = [];
        window.clearTimeout(time);
      }, 10000);
    }
  }


  window.addEventListener('keydown', checkKeys);
})()


})(angular);
},{}],"/home/rgordon/Desktop/Projects/gw_dev/src/scripts/scores.js":[function(require,module,exports){
(function (angular, $) {
	
	// this is the live scoring app for the widget on the top right
	// live scoring will match as closely as possible the output from the
	// element with the id "framing"
	// different behaviour will likely need to be put in place for the 
	// home page version
	// ***NOTE nwid (nationwide) is now known as web.com tour ***
	// pga / nwid / chmp scoring will come from xml documents on rankings.golfweek.com
	// college / amateur / junior scoring will come from golfstat


	// PGA model

	// pga data should be the xml data 
	function PGA (pgadata) {
		if (pgadata) {
			this.setData(pgadata);
		}
		// other standard initializations
	}

	PGA.prototype = {
		setData: function (pgadata) {
			angular.extend(this, pgadata);
		},
		// Load will fetch the data from the pga xml
		load: function () {
			var scope = this;
			scope.players = [];
			$.ajax({
				type: "GET",
				url:'http://rankings.golfweek.com/fetchurl/assets/pga.xml',
				dataType: 'xml'
				}).success(function (pgadata) {
				scope.setData(pgadata);
				var players = $(pgadata).find('Player');
				for (var i = players.length - 1; i >= 0; i--) {
					player = {};
					player.name = $(players[i]).attr('FInit') + ". " + $(players[i]).attr('Lname');
					player.current_rank = $(players[i]).attr('CurPos');
					player.today = $(players[i]).attr('CurParRel');
					player.overall = $(players[i]).attr('TournParRel');
					player.thru = $(players[i]).attr('Thru');			
					scope.players.push(player);
				};
			});
		}
	}

	
	var thed = new PGA();
	thed.load();
	console.log(thed);

})(angular, jQuery);
},{}]},{},["./src/scripts/app.js"])
//# sourceMappingURL=data:application/json;base64,
