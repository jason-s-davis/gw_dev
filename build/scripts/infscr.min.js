(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/scripts/infscr.js":[function(require,module,exports){
(function (angular) {
var infscr = angular.module('infscr', []);

infscr.config(function ($httpProvider) {
	delete $httpProvider.defaults.headers.common['X-Requested-With'];
});


// scrollDiv defines the object to be used as a directive
function scrollDiv ($window) {
  'use strict';

  // this function loads on the defined element
  return function (scope, element, attrs) {
      // position starts at 0
      scope.position = 0;

      // wait for the LOADDONE event
      scope.$on('LOADDONE', function (event) {
        scope.position = Math.floor(((window.pageYOffset + $(window).height()) / $(document).height()) * 100);
        
        angular.element(window).bind('scroll', function () {          
          scope.position = Math.floor(((this.pageYOffset + $(window).height()) / $(document).height()) * 100);
          if (scope.position > 85) {
            scope.getMore();
          }
          scope.$apply();
        });

        if (scope.count >= 60) {
          angular.element(window).unbind('scroll');
        }
      });

    }
}

// assign scrollDiv to a directive
// in a minification safe manner
infscr.directive('scrollDiv', ['$window', scrollDiv]);






// The getStoryList function uses angularjs' $http
// object to make xhr's to get stories
function getStoryList ($http) {

  // the url to request stories from
  var url = 'http://golfweek.com/json/';

  return {
    // the get function should suffice for most normal uses
    // it accepts a context object to get info about the sections
    // ctx also needs a success function to return the data
    get: function (ctx) {
      // the category function is here for future use with sections and sub sections
      // currently it is not used
      var category = (ctx.section === undefined) ? '' : ctx.section;
      category += (ctx.sub === undefined || ctx.sub === 'all') ? '' : '/' + ctx.sub;
      category += (ctx.subsub === undefined) ? '' : '/' + ctx.subsub;
      category += (ctx.subsubsub === undefined) ? '' : '/' + ctx.subsubsub;
      
      // the count is at minimum 15 but must be in increments of 15 currently
      var count = (ctx.count === undefined) ? 15 : ctx.count;
      
      // make the request to golfweek 
      // ***MUST BE A POST OR ELLINGTON BLOCKS IT***
      $http.post(url + 'section/?Section=' + category + '&Num=' + count)
        .success(function (data) {  
          ctx.success(data);
        })
        .error(function (data, status) {
          console.log(data, status);
        });
    }
  }
}


// Assign getStoryList as an angular factory 
// in a manner safe for minification
infscr.factory('getStoryList', ['$http', getStoryList]);



// the getStoryContent function is intended to load the clicked
// story into the selected div
function getStoryContent ($http) {
  
  // the base url to request the storydata from
  var url = 'http://golfweek.com/';

  return {
    get: function (ctx) {      
      $http.post(url + ctx.slug + '?json')
        .success(function (data) {
          ctx.storySuccess(data);
        })
        .error(function (data, status) {
          console.log(data, status);
        });
    }
  }
}


// Assign getStoryList as an angular factory 
// in a manner safe for minification
infscr.factory('getStoryContent', ['$http', getStoryContent]);



// the infScrollController function is intended to be used 
// in the div where the stories should be added for infinite 
// scrolling
function infScrollController ($scope, $window, storyList, story) {
	$scope.count = 15;  // number of stories to get
	$scope.fetching = false; // are we fetching right now?
  $scope.stories = []; // starts out as an empty array

  $scope.$on('LOAD', function (e) { $scope.fetching = true; });
  $scope.$on('LOADDONE', function (e) { $scope.fetching = false; });

  // this is the success handler when data is received
  $scope.success = function (data) {
    angular.forEach(data.stories, function (val, key) {
      this[key] = val;
    }, $scope.stories);
    // console.log('%O', $scope.stories[0]);
    // let everything know we are done loading
    $scope.$emit('LOADDONE');
  }

  // get the stories the first time
  storyList.get($scope);

  // getMore should be used when the div is scrolled
	$scope.getMore = function () {
		// if page position is bigger than 88 
		// fetch more stories
		if (!$scope.fetching) {
      $scope.$emit('LOAD');
      $scope.count = ($scope.count === 60) ? 60 : $scope.count + 15;
			// let everything know we are loading
      storyList.get($scope);

		}
	}

  $scope.storySuccess = function (data) {
    // set the data here to the expanding div for the story
    // console.log('%o', $scope.stories);
    $scope.stories[$scope.storyId]['storyContent'] = data.story[0];
    console.log(data);
  }


  $scope.storyClick = function () {
    // console.log('%o',this.$index)
    $scope.slug = this.story.id;
    $scope.storyId = this.$index;
    story.get($scope);
  }


}


// Assign infScrollController as an angular controller 
// in a manner safe for minification
infscr.controller('infScrollCtrl', ['$scope', '$window', 'getStoryList', 'getStoryContent', infScrollController]);



var storyList = {};
var storyCount = 15;

function bindModelInput(obj, property, domElem) {
  Object.defineProperty(obj, property, {
    get: function() { return domElem.value; }, 
    set: function(newValue) { domElem.value = newValue; },
    configurable: true
  });
}






(function () {

  var THECODE = [38,38,40,40,37,39,37,39,66,65];

  var testcode = [];
  var time;

  // k code stuff
  function checkKeys (e) {
    var button = (e.keyCode);

    if (THECODE.indexOf(button) > -1) {
      testcode[testcode.length] = e.keyCode;

      if (testcode.length === THECODE.length) {
        checkCode();
      } else {
        clearCode();
      }
    }
  }

  function checkCode () {
    for (var i = 0; i < THECODE.length; i++) {
      if (THECODE[i] !== testcode[i]) {
        testcode = [];
        break;
      }
    }
    if (testcode.length > 0) {
      console.log('duf time!');
    }
  }

  function clearCode () {
    if (time === undefined) {
      time = window.setTimeout(function() {
        testcode = [];
        window.clearTimeout(time);
      }, 10000);
    }
  }


  window.addEventListener('keydown', checkKeys);
})()


})(angular);
},{}]},{},["./src/scripts/infscr.js"])
//# sourceMappingURL=data:application/json;base64,
